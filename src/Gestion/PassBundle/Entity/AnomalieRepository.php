<?php

namespace Gestion\PassBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Response;

/**
 * AnomalieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnomalieRepository extends EntityRepository {

    public function AnomaliesParSce($service) {

        $annee_encours = date('Y');
        $mois_encours = date('m');
        $begin = date($annee_encours . '-' . $mois_encours . '-01');
        $jours_encours = date('d');

//retourne la date de demain par rapport a la date du system
        $end = date("Y-m-d", mktime(0, 0, 0, date("m"), date("d") + 1, date("Y")));

        $qb = $this->createQueryBuilder('a');
        $qb->select('a.dateDetection')        //            $qb->select('count(a.id)')
                ->where('a.service = :service')
                ->setParameter('service', $service)
                ->andWhere('a.dateDetection BETWEEN :begin AND :end')
                ->setParameter('begin', $begin)
                ->setParameter('end', $end)
                ->orderBy('a.dateDetection', 'ASC');
        $arrayAss = $qb->getQuery()
                ->getArrayResult();

        $arrayResult = array();
        $arrayResult['name'] = 'Sce ' . $service;

        $i = 1;

        for ($day = 1; $day <= $jours_encours; $day++) {
            $compte = 0;
            foreach ($arrayAss as $data) {
                if ($day <= 9) {
                    if ($data['dateDetection']->format('Y-m-d') == date($annee_encours . '-' . $mois_encours . '-0' . $day)) {
                        $compte++;
                    }
                } else {
                    if ($data['dateDetection']->format('Y-m-d') == date($annee_encours . '-' . $mois_encours . '-' . $i)) {
                        $compte++;
                    }
                }
            }
            $arrayResult['data'][] = $compte;
            $i++;
        }
        return $arrayResult;
    }

    public function AnomaliesPieParSce($service){
        $annee_encours = date('Y');
        $mois_encours = date('m');
        $begin = date($annee_encours . '-' . $mois_encours . '-01');
//retourne la date de demain par rapport a la date du system
        $end = date("Y-m-d", mktime(0, 0, 0, date("m"), date("d") + 1, date("Y")));
        $qb = $this->createQueryBuilder('a');
        $qb->select('count(a.id)')        //            $qb->select('count(a.id)')
                ->where('a.service = :service')
                ->setParameter('service', $service)
                ->andWhere('a.dateDetection BETWEEN :begin AND :end')
                ->setParameter('begin', $begin)
                ->setParameter('end', $end)
                ->orderBy('a.dateDetection', 'ASC');
        $query=$qb->getQuery();
        $result= $query->getSingleResult();

        $arrayResult = array();
        $arrayResult[] = 'Sce ' . $service;
    $arrayResult[]=$result[1];
        
        return $arrayResult;

        }        
    public function nbrAnomaliesEncours(){
$em=$this->getEntityManager();
        $qb = $em->createQueryBuilder('an');
        $qb->select('count(an.id)')        //            $qb->select('count(a.id)')
               ->from('GestionPassBundle:Anomalie', 'an')
                ->where('an.dateReglement IS NULL') ;
        $query=$qb->getQuery();
       $result= $query->getSingleScalarResult();
    

        
        return  $result  ;

        }            
    }